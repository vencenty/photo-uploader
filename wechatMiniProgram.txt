# 微信小程序版本照片上传系统开发提示词

## 项目概述
基于现有的React照片上传系统，开发一个功能完整的微信小程序版本。该系统主要用于照片冲印订单管理，包含订单查询、多尺寸照片上传、图片裁剪压缩等核心功能。

## 🎯 核心功能需求

### 1. 页面结构（共3个页面）
- **订单查询页** (`pages/orderQuery/index`)
- **订单上传页** (`pages/orderUpload/index`) 
- **提交成功页** (`pages/submitSuccess/index`)

### 2. 主要功能特性
- 订单号查询和创建
- 多尺寸照片选择上传（12种尺寸规格）
- 图片压缩和裁剪功能
- 实时上传进度显示
- 虚拟滚动优化大量图片展示
- 离线存储和网络状态检测
- 用户体验优化

## 🏗️ 技术架构要求

### 开发框架和工具
```json
{
  "基础框架": "微信小程序原生开发",
  "UI组件库": "Vant Weapp（推荐）或 TDesign MiniProgram",
  "状态管理": "原生globalData + 本地存储",
  "网络请求": "wx.request 封装",
  "图片处理": "wx.chooseMedia + canvas压缩",
  "文件上传": "wx.uploadFile",
  "本地存储": "wx.setStorageSync/wx.getStorageSync"
}
```

### 项目目录结构
```
miniprogram/
├── pages/
│   ├── orderQuery/         # 订单查询页
│   ├── orderUpload/        # 订单上传页
│   └── submitSuccess/      # 提交成功页
├── components/             # 自定义组件
│   ├── photo-uploader/     # 照片上传组件
│   ├── size-selector/      # 尺寸选择组件
│   ├── image-cropper/      # 图片裁剪组件
│   └── virtual-list/       # 虚拟滚动列表
├── utils/                  # 工具函数
│   ├── api.js             # API接口封装
│   ├── imageUtil.js       # 图片处理工具
│   ├── storage.js         # 存储工具
│   └── common.js          # 通用工具
├── config/                 # 配置文件
│   └── index.js           # 全局配置
├── app.js                 # 小程序入口
├── app.json              # 全局配置
└── app.wxss              # 全局样式
```

## 📱 详细页面实现要求

### 1. 订单查询页 (pages/orderQuery/index)

#### 功能实现：
```javascript
// 核心功能
1. 订单号输入框（支持扫码输入）
2. 查询按钮和加载状态
3. 网络状态检测
4. 输入验证和错误提示
5. 查询结果处理（存在/不存在订单）
6. 自动跳转到上传页面

// 小程序特有功能
- 支持扫码输入订单号
- 键盘弹起时页面适配
- 网络状态实时监测
```

#### 页面布局要求：
```xml
<view class="container">
  <view class="header">
    <text class="title">订单查询</text>
  </view>
  
  <view class="form-section">
    <van-field
      label="订单号"
      placeholder="请输入订单号"
      bind:change="onOrderSnChange"
      use-button-slot
    >
      <van-button slot="button" size="small" bind:click="onScanCode">
        扫码
      </van-button>
    </van-field>
    
    <van-button 
      type="primary" 
      block 
      loading="{{ loading }}"
      bind:click="onQueryOrder"
    >
      查询订单
    </van-button>
  </view>
</view>
```

### 2. 订单上传页 (pages/orderUpload/index)

#### 核心功能实现：
```javascript
// 主要功能模块
1. 订单信息编辑区域（订单号、收货人、备注）
2. 尺寸选择器（12种规格多选）
3. 分尺寸照片上传区域
4. 图片预览和删除功能
5. 图片压缩和裁剪
6. 上传进度显示
7. 总数统计
8. 订单提交确认

// 小程序特有优化
- 大量图片虚拟滚动
- 图片懒加载
- Canvas图片压缩
- 上传队列管理
- 内存优化
```

#### 尺寸规格配置：
```javascript
const PHOTO_SIZES = [
  { key: '3cun-full', name: '3寸-满版', ratio: [3, 2] },
  { key: '3cun-border', name: '3寸-留白', ratio: [3, 2] },
  { key: '4cun-full', name: '4寸-满版', ratio: [4, 3] },
  { key: '4cun-border', name: '4寸-留白', ratio: [4, 3] },
  { key: '5cun-full', name: '5寸-满版', ratio: [5, 3.5] },
  { key: '5cun-border', name: '5寸-留白', ratio: [5, 3.5] },
  { key: '6cun-full', name: '6寸-满版', ratio: [6, 4] },
  { key: '6cun-border', name: '6寸-留白', ratio: [6, 4] },
  { key: '7cun-full', name: '7寸-满版', ratio: [7, 5] },
  { key: '7cun-border', name: '7寸-留白', ratio: [7, 5] },
  { key: '8cun-full', name: '8寸-满版', ratio: [8, 6] },
  { key: '8cun-border', name: '8寸-留白', ratio: [8, 6] },
  { key: '10cun-full', name: '10寸-满版', ratio: [10, 8] },
  { key: '10cun-border', name: '10寸-留白', ratio: [10, 8] },
  { key: '12cun-full', name: '12寸-满版', ratio: [12, 8] },
  { key: '12cun-border', name: '12寸-留白', ratio: [12, 8] }
];
```

### 3. 提交成功页 (pages/submitSuccess/index)

#### 功能要求：
```javascript
// 显示内容
1. 成功提示信息
2. 各尺寸上传数量统计
3. 总上传数量
4. 操作按钮（查看订单、继续上传、返回首页）

// 小程序特有
- 分享功能
- 客服联系
- 订单保存到收藏
```

## 🔧 核心组件开发要求

### 1. 照片上传组件 (components/photo-uploader)

#### 功能特性：
```javascript
// 基础功能
- 多图片选择（wx.chooseMedia）
- 图片预览和删除
- 上传进度显示
- 失败重试机制
- 并发上传控制（最多3个并发）

// 图片处理功能
- 自动压缩（Canvas压缩算法）
- 裁剪功能（保持宽高比）
- 图片格式转换
- 尺寸验证

// 性能优化
- 虚拟滚动（大量图片）
- 图片懒加载
- 内存释放管理
- 上传队列管理
```

#### 组件接口设计：
```javascript
// properties
{
  size: String,           // 尺寸规格
  maxCount: Number,       // 最大上传数量
  photos: Array,          // 已上传照片列表
  disabled: Boolean,      // 是否禁用
  showCrop: Boolean      // 是否显示裁剪功能
}

// events  
{
  'photos-change': Function,  // 照片列表变化
  'upload-progress': Function, // 上传进度
  'upload-error': Function    // 上传错误
}
```

### 2. 图片裁剪组件 (components/image-cropper)

#### 实现要求：
```javascript
// 基于Canvas实现
1. 图片缩放和拖拽
2. 裁剪框比例控制
3. 实时预览效果
4. 裁剪结果导出
5. 触摸手势支持

// 性能优化
- 大图片分块处理
- Canvas缓存机制
- 内存使用控制
```

### 3. 虚拟滚动组件 (components/virtual-list)

#### 适用场景：
- 大量图片展示
- 内存优化需求
- 滚动性能提升

## 🌐 API接口对接

### 接口配置
```javascript
// config/index.js
const config = {
  baseUrl: 'https://your-api-domain.com',
  // 本地开发环境
  // baseUrl: 'http://localhost:8787',
  
  timeout: 30000,
  uploadTimeout: 60000
};
```

### 主要接口封装
```javascript
// utils/api.js

// 1. 查询订单信息
export function getOrderInfo(orderSn) {
  return request({
    url: '/api/order/info',
    method: 'GET',
    data: { order_sn: orderSn }
  });
}

// 2. 上传照片
export function uploadPhoto(filePath) {
  return new Promise((resolve, reject) => {
    wx.uploadFile({
      url: config.baseUrl + '/api/photo/upload',
      filePath,
      name: 'file',
      timeout: config.uploadTimeout,
      success: resolve,
      fail: reject
    });
  });
}

// 3. 提交订单
export function submitOrder(data) {
  return request({
    url: '/api/order/submit',
    method: 'POST',
    data
  });
}
```

## 🎨 UI设计要求

### 设计风格
- 简洁现代的扁平化设计
- 符合微信小程序设计规范
- 色彩搭配清爽，主色调建议使用蓝色系
- 图标使用统一的图标库（推荐使用Vant Weapp内置图标）

### 响应式适配
```scss
// 适配不同屏幕尺寸
@media screen and (max-width: 320px) {
  // iPhone SE等小屏设备
}

@media screen and (min-width: 375px) {
  // iPhone 6/7/8 标准尺寸
}

@media screen and (min-width: 414px) {
  // iPhone 6Plus/7Plus/8Plus 大屏
}
```

### 主题色彩配置
```scss
// app.wxss
:root {
  --primary-color: #1989fa;
  --success-color: #07c160;
  --warning-color: #ff976a;
  --danger-color: #ee0a24;
  --text-color: #323233;
  --text-color-secondary: #969799;
  --border-color: #ebedf0;
  --background-color: #f7f8fa;
}
```

## ⚡ 性能优化要求

### 1. 图片处理优化
```javascript
// utils/imageUtil.js

// 图片压缩算法
export function compressImage(src, quality = 0.8, maxWidth = 1200) {
  return new Promise((resolve) => {
    const canvas = wx.createCanvasContext('compress-canvas');
    
    wx.getImageInfo({
      src,
      success(res) {
        const { width, height } = res;
        const ratio = Math.min(maxWidth / width, maxWidth / height);
        
        const targetWidth = width * ratio;
        const targetHeight = height * ratio;
        
        canvas.drawImage(src, 0, 0, targetWidth, targetHeight);
        canvas.draw(false, () => {
          wx.canvasToTempFilePath({
            canvasId: 'compress-canvas',
            quality,
            success: resolve
          });
        });
      }
    });
  });
}
```

### 2. 内存管理
```javascript
// 图片内存释放
function releaseImage(tempFilePath) {
  try {
    wx.removeSavedFile({
      filePath: tempFilePath
    });
  } catch (e) {
    console.warn('释放图片失败:', e);
  }
}

// 页面卸载时清理
onUnload() {
  this.data.photos.forEach(photo => {
    if (photo.tempFilePath) {
      releaseImage(photo.tempFilePath);
    }
  });
}
```

### 3. 上传队列管理
```javascript
// 控制并发上传数量
const UPLOAD_QUEUE = {
  maxConcurrent: 3,
  queue: [],
  running: []
};

function addToUploadQueue(uploadTask) {
  UPLOAD_QUEUE.queue.push(uploadTask);
  processUploadQueue();
}

function processUploadQueue() {
  while (
    UPLOAD_QUEUE.running.length < UPLOAD_QUEUE.maxConcurrent &&
    UPLOAD_QUEUE.queue.length > 0
  ) {
    const task = UPLOAD_QUEUE.queue.shift();
    UPLOAD_QUEUE.running.push(task);
    executeUpload(task);
  }
}
```

## 📱 小程序特有功能

### 1. 扫码功能
```javascript
// 扫码输入订单号
onScanCode() {
  wx.scanCode({
    success: (res) => {
      this.setData({
        orderSn: res.result
      });
    },
    fail: (err) => {
      wx.showToast({
        title: '扫码失败',
        icon: 'none'
      });
    }
  });
}
```

### 2. 分享功能
```javascript
// 页面分享
onShareAppMessage() {
  return {
    title: '照片冲印订单上传',
    path: '/pages/orderQuery/index',
    imageUrl: '/images/share-cover.jpg'
  };
}

// 分享到朋友圈
onShareTimeline() {
  return {
    title: '照片冲印订单上传',
    imageUrl: '/images/share-cover.jpg'
  };
}
```

### 3. 网络状态监测
```javascript
// app.js
App({
  onLaunch() {
    // 监听网络状态变化
    wx.onNetworkStatusChange((res) => {
      this.globalData.networkType = res.networkType;
      this.globalData.isConnected = res.isConnected;
      
      // 通知页面网络状态变化
      if (this.networkStatusCallback) {
        this.networkStatusCallback(res);
      }
    });
  }
});
```

### 4. 本地存储策略
```javascript
// utils/storage.js

// 订单数据本地缓存
export function saveOrderData(orderSn, data) {
  try {
    wx.setStorageSync(`order_${orderSn}`, {
      ...data,
      updateTime: Date.now()
    });
  } catch (e) {
    console.error('保存订单数据失败:', e);
  }
}

// 获取缓存的订单数据
export function getOrderData(orderSn) {
  try {
    const data = wx.getStorageSync(`order_${orderSn}`);
    // 检查数据是否过期（7天）
    if (data && Date.now() - data.updateTime < 7 * 24 * 60 * 60 * 1000) {
      return data;
    }
  } catch (e) {
    console.error('获取订单数据失败:', e);
  }
  return null;
}
```

## 🔍 用户体验优化

### 1. 加载状态管理
```javascript
// 全局loading管理
const LoadingManager = {
  count: 0,
  show(title = '加载中...') {
    this.count++;
    wx.showLoading({ title, mask: true });
  },
  hide() {
    this.count--;
    if (this.count <= 0) {
      this.count = 0;
      wx.hideLoading();
    }
  }
};
```

### 2. 错误处理和重试
```javascript
// 网络请求错误处理
function handleRequestError(error, retry) {
  const errorMessages = {
    'timeout': '请求超时，请检查网络连接',
    'network': '网络连接失败，请检查网络',
    'server': '服务器错误，请稍后重试'
  };
  
  wx.showModal({
    title: '请求失败',
    content: errorMessages[error.type] || '未知错误',
    confirmText: '重试',
    cancelText: '取消',
    success(res) {
      if (res.confirm && retry) {
        retry();
      }
    }
  });
}
```

### 3. 操作反馈优化
```javascript
// 触觉反馈
function vibrateFeedback(type = 'light') {
  wx.vibrateShort({ type });
}

// 成功提示
function showSuccess(title, duration = 2000) {
  wx.showToast({
    title,
    icon: 'success',
    duration
  });
  vibrateFeedback('success');
}
```

## 🧪 测试要求

### 功能测试清单
- [ ] 订单查询功能正常
- [ ] 照片选择和上传功能
- [ ] 图片压缩和裁剪功能  
- [ ] 多尺寸照片管理
- [ ] 上传进度显示
- [ ] 网络异常处理
- [ ] 本地数据缓存
- [ ] 页面间数据传递
- [ ] 扫码功能
- [ ] 分享功能

### 性能测试
- [ ] 大量图片加载性能
- [ ] 内存使用情况
- [ ] 上传并发控制
- [ ] 网络请求超时处理
- [ ] 低网速环境测试

### 兼容性测试
- [ ] iOS系统兼容性
- [ ] Android系统兼容性
- [ ] 不同屏幕尺寸适配
- [ ] 不同微信版本兼容

## 📦 发布部署

### 小程序配置
```json
// app.json
{
  "pages": [
    "pages/orderQuery/index",
    "pages/orderUpload/index", 
    "pages/submitSuccess/index"
  ],
  "window": {
    "backgroundTextStyle": "light",
    "navigationBarBackgroundColor": "#1989fa",
    "navigationBarTitleText": "照片上传",
    "navigationBarTextStyle": "white",
    "backgroundColor": "#f7f8fa",
    "enablePullDownRefresh": true
  },
  "tabBar": {
    "color": "#666666",
    "selectedColor": "#1989fa",
    "backgroundColor": "#ffffff",
    "list": [
      {
        "pagePath": "pages/orderQuery/index",
        "text": "订单查询",
        "iconPath": "images/search.png",
        "selectedIconPath": "images/search-active.png"
      },
      {
        "pagePath": "pages/orderUpload/index", 
        "text": "上传照片",
        "iconPath": "images/upload.png",
        "selectedIconPath": "images/upload-active.png"
      }
    ]
  },
  "permission": {
    "scope.writePhotosAlbum": {
      "desc": "保存图片到相册"
    }
  },
  "requiredBackgroundModes": ["location"],
  "usingComponents": {
    "van-button": "@vant/weapp/button/index"
  }
}
```

### 版本管理
- 使用语义化版本号 (v1.0.0)
- 详细的版本更新日志
- 线上环境和测试环境配置分离

## 🎯 开发优先级

### 第一阶段（核心功能）
1. 基础页面框架搭建
2. 订单查询功能
3. 基础照片上传功能
4. API接口对接

### 第二阶段（功能完善）
1. 图片压缩和裁剪
2. 多尺寸管理
3. 上传进度和状态管理
4. 本地存储功能

### 第三阶段（体验优化）
1. 虚拟滚动优化
2. 性能优化
3. 错误处理完善
4. 用户体验细节优化

### 第四阶段（高级功能）
1. 扫码功能
2. 分享功能
3. 离线处理
4. 数据统计

这套提示词涵盖了将React照片上传系统转换为微信小程序的所有核心要点，包含详细的技术实现方案、代码示例和最佳实践。按照这个提示词开发，可以确保小程序版本具备完整的功能和良好的用户体验。 